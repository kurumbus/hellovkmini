{"version":3,"sources":["components/SimpleExample.js","App.js","components/WikiExtract.js","registerServiceWorker.js","index.js","images/wiki.svg"],"names":["SimpleExample","position","this","props","lat","lng","Map","center","zoom","className","TileLayer","attribution","url","Marker","Popup","Component","App","state","getInitState","_this","files","console","log","setState","showSpinner","pagesWithMatchingImages","webEntities","visuallySimilarImages","slideIndex","landmarks","displayResultsMode","preview","req","request","post","forEach","file","attach","then","res","body","pages_with_matching_images","web_entities","visually_similar_images","file_url","platform","activeView","id","activePanel","status","onDrop","onDropFiles","accept","getRootProps","getInputProps","mode","size","header","subheader","background","style","backgroundColor","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","actions","height","onClick","_refresh","display","alignItems","flexDirection","marginTop","length","join","map","landmark","i","marginVertical","key","JSON","stringify","title","locations","latitude","longitude","wiki","before","src","require","article","disabled","multiline","getWikiImage","caption","extract","Fragment","href","target","page","getPageImage","page_title","slideWidth","align","onChange","image","partial_matching_images","full_matching_images","thumbnail","source","reader","FileReader","onabort","onerror","onload","binaryStr","result","readAsArrayBuffer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","connect","send","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.3f8b943c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport { Div } from '@vkontakte/vkui';\r\nimport \"leaflet/dist/leaflet.css\"\r\n\r\n\r\nexport default class SimpleExample extends Component<{}> {\r\n\r\n    render() {\r\n        const position = [this.props.lat, this.props.lng];\r\n        return (\r\n                <Map center={position} zoom={13} className=\"small-map\">\r\n                    <TileLayer\r\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    <Marker position={position}>\r\n                        <Popup>\r\n                            A pretty CSS3 popup. <br /> Easily customizable.\r\n                        </Popup>\r\n                    </Marker>\r\n                </Map>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport {\r\n    Avatar,\r\n    Banner,\r\n    Button,\r\n    Card,\r\n    Div,\r\n    Gallery,\r\n    Group,\r\n    Header,\r\n    Link,\r\n    List,\r\n    Panel,\r\n    PanelHeader,\r\n    PanelHeaderContent,\r\n    platform,\r\n    RichCell,\r\n    Root, SimpleCell,\r\n    Spinner,\r\n    View\r\n} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport Dropzone from \"react-dropzone\";\r\nimport request from \"superagent\";\r\nimport SimpleExample from \"./components/SimpleExample\";\r\nimport './css/style.css'\r\nimport WikiExtract from \"./components/WikiExtract\";\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = App.getInitState();\r\n    }\r\n\r\n    static getInitState() {\r\n        return {\r\n            activePanel: 'mainPanel',\r\n            pagesWithMatchingImages: [],\r\n            webEntities: [],\r\n            showSpinner: false,\r\n            visuallySimilarImages: [],\r\n            landmarks: [],\r\n            slideIndex: 0,\r\n            displayResultsMode: false,\r\n            preview: null,\r\n        };\r\n    }\r\n\r\n    onDropFiles() {\r\n        let _this = this;\r\n        return function (files) {\r\n            console.log(files);\r\n\r\n            _this.setState({\r\n                showSpinner: true, pagesWithMatchingImages: [], webEntities: [],\r\n                visuallySimilarImages: [], slideIndex: 0, landmarks: [], displayResultsMode: false, preview: null,\r\n            });\r\n            const req = request.post('https://ocr.kurumbus.com/api/web');\r\n            files.forEach(file => {\r\n                req.attach('file', file);\r\n            });\r\n            req.then(res => {\r\n                console.log(res);\r\n\r\n                _this.setState({\r\n                    pagesWithMatchingImages: res.body.pages_with_matching_images ?? [],\r\n                    webEntities: res.body.web_entities ?? [],\r\n                    landmarks: res.body.landmarks ?? [],\r\n                    visuallySimilarImages: res.body.visually_similar_images ?? [],\r\n                    showSpinner: false, displayResultsMode: true, preview: res.body.file_url\r\n                });\r\n            });\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const osname = platform();\r\n        return (\r\n            <Root activeView=\"mainView\">\r\n                <View id=\"mainView\" activePanel={this.state.activePanel}>\r\n                    <Panel id=\"mainPanel\">\r\n                        <PanelHeader>\r\n                            <PanelHeaderContent\r\n                                status=\"достопримечательностей и предметов по фото\"\r\n                            >\r\n                                Распознавание\r\n                            </PanelHeaderContent>\r\n                        </PanelHeader>\r\n                        <Group>\r\n                            {\r\n                                ! this.state.displayResultsMode &&\r\n                                <Div>\r\n                                    <Dropzone onDrop={this.onDropFiles()} accept=\"image/jpeg,image/jpg,image/png\">\r\n                                        {({getRootProps, getInputProps}) => (\r\n                                            <section>\r\n                                                <Banner {...getRootProps()}\r\n                                                        mode=\"image\"\r\n                                                        size=\"m\"\r\n                                                        header=\"Выберите файл\"\r\n                                                        subheader={<span>для распознавания</span>}\r\n                                                        background={\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    backgroundColor: '#5b9be6',\r\n                                                                    backgroundImage: 'url(https://sun9-31.userapi.com/PQ4UCzqE_jue9hAINefBMorYCdfGXvcuV5nSjA/eYugcFYzdW8.jpg)',\r\n                                                                    backgroundPosition: 'right bottom',\r\n                                                                    backgroundSize: '102%',\r\n                                                                    backgroundRepeat: 'no-repeat',\r\n                                                                }}\r\n                                                            >\r\n                                                                <input {...getInputProps()} />\r\n                                                            </div>\r\n                                                        }\r\n                                                        actions={<Button mode=\"overlay\" size=\"l\">Выбрать</Button>}\r\n                                                />\r\n                                            </section>\r\n                                        )}\r\n                                    </Dropzone>\r\n                                </Div>\r\n                            }\r\n                            {\r\n                                this.state.displayResultsMode &&\r\n                                <Div>\r\n                                    <Banner mode=\"image\"\r\n                                            size=\"m\"\r\n                                            style={{ height: 128 }}\r\n                                            className=\"result-banner\"\r\n                                            background={\r\n                                                <div\r\n                                                    style={{\r\n                                                        backgroundColor: '#5b9be6',\r\n                                                        backgroundImage: 'url('+this.state.preview+')',\r\n                                                        backgroundPosition: 'center center',\r\n                                                        backgroundSize: '100%',\r\n                                                        backgroundRepeat: 'no-repeat',\r\n                                                    }}\r\n                                                />\r\n                                            }\r\n                                            actions={<Button mode=\"overlay\" size=\"l\" onClick={() => this._refresh()}>Сбросить</Button>}\r\n                                    />\r\n                                </Div>\r\n                            }\r\n\r\n                        </Group>\r\n                        {\r\n                            this.state.showSpinner && (\r\n                                <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                                    <Spinner size=\"large\" style={{ marginTop: 20 }} />\r\n                                </div>\r\n                            )\r\n                        }\r\n                        {\r\n                            this.state.webEntities.length > 0 &&\r\n                            <Group  header={<Header mode=\"secondary\">Результат распознавания:</Header>}>\r\n\r\n                                <Div>\r\n                                    {\r\n                                        this.state.webEntities.join(', ')\r\n                                    }\r\n                                </Div>\r\n                            </Group>\r\n                        }\r\n                        {\r\n                            this.state.landmarks.length > 0 &&\r\n                            <Group header={<Header mode=\"secondary\">Места на фотографии:</Header>}>\r\n                                {\r\n                                    this.state.landmarks.map((landmark, i) => {\r\n                                        return (\r\n                                            <Div style={{marginVertical: 20}} key={JSON.stringify(landmark)}>\r\n                                                <Card mode=\"shadow\">\r\n                                                    <Div>{landmark.title}</Div>\r\n                                                    { landmark.locations.length > 0 &&\r\n                                                    <SimpleExample lat={landmark.locations[0].latitude}\r\n                                                                   lng={landmark.locations[0].longitude}\r\n                                                    />\r\n                                                    }\r\n                                                    { landmark.wiki &&\r\n                                                    <Group header={/*<Header mode=\"secondary\"><Avatar size={16} /></Header>*/\r\n                                                        <SimpleCell\r\n                                                            before={<Avatar size={28} src={require('./images/wiki.svg')} />}\r\n                                                        >\r\n                                                            Результаты из Википедии\r\n                                                        </SimpleCell>}>\r\n                                                        {\r\n                                                            landmark.wiki.map(article => {\r\n                                                                return (\r\n                                                                    <Card mode=\"outline\" key={JSON.stringify(article)}>\r\n                                                                        <RichCell\r\n                                                                            disabled\r\n                                                                            multiline\r\n                                                                            before={<Avatar size={72} mode=\"image\" src={this.getWikiImage(article)} />}\r\n                                                                            caption={article.extract}\r\n                                                                            actions={\r\n                                                                                <React.Fragment>\r\n                                                                                    <Link href={\"https://en.wikipedia.org/wiki/\"+article.title} target=\"_blank\">\r\n                                                                                        <Button mode=\"secondary\">Открыть</Button>\r\n                                                                                    </Link>\r\n                                                                                </React.Fragment>\r\n                                                                            }\r\n                                                                        >\r\n                                                                            {article.title}\r\n                                                                        </RichCell>\r\n                                                                    </Card>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </Group>\r\n                                                    }\r\n                                                </Card>\r\n                                            </Div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Group>\r\n                        }\r\n                        {\r\n                            this.state.pagesWithMatchingImages.length > 0 &&\r\n                            <Group header={<Header mode=\"secondary\">Связанные ссылки:</Header>}>\r\n                                {\r\n                                    this.state.pagesWithMatchingImages.map(page =>\r\n                                        <RichCell\r\n                                            key={JSON.stringify(page)}\r\n                                            disabled\r\n                                            multiline\r\n                                            before={<Avatar size={72} mode=\"image\" src={this.getPageImage(page)}/>}\r\n                                            actions={\r\n                                                <React.Fragment>\r\n                                                    <Link href={page.url} target=\"_blank\">\r\n                                                        <Button mode=\"secondary\">\r\n                                                            Открыть\r\n                                                        </Button>\r\n                                                    </Link>\r\n                                                </React.Fragment>\r\n                                            }\r\n                                        >\r\n                                            {page.page_title}\r\n                                        </RichCell>\r\n                                    )\r\n                                }\r\n                            </Group>\r\n                        }\r\n\r\n                        {\r\n                            this.state.visuallySimilarImages.length > 0 &&\r\n                            <Group header={<Header mode=\"secondary\">Похожие картинки:</Header>}>\r\n\r\n                                <Gallery\r\n                                    slideWidth=\"90%\"\r\n                                    align=\"center\"\r\n                                    style={{ height: 300 }}\r\n                                    slideIndex={this.state.slideIndex}\r\n                                    onChange={slideIndex => this.setState({slideIndex})}\r\n                                >\r\n                                    {\r\n                                        this.state.visuallySimilarImages.map(image =>\r\n                                            <div style={{\r\n                                                backgroundImage: 'url('+image+')',\r\n                                                backgroundPosition: 'right bottom',\r\n                                                backgroundSize: '100%',\r\n                                                backgroundRepeat: 'no-repeat',\r\n                                            }} key={image}/>\r\n                                        )\r\n                                    }\r\n                                </Gallery>\r\n                            </Group>\r\n                        }\r\n\r\n                    </Panel>\r\n                </View>\r\n            </Root>\r\n        );\r\n    }\r\n\r\n    getPageImage(page) {\r\n        if (page.partial_matching_images && page.partial_matching_images.length > 0) {\r\n            return  page.partial_matching_images[0].url;\r\n        }\r\n\r\n        if (page.full_matching_images && page.full_matching_images.length > 0) {\r\n            return  page.full_matching_images[0].url;\r\n        }\r\n        return require('./images/wiki.svg')\r\n    }\r\n\r\n    getWikiImage(article) {\r\n        if (article && article.thumbnail) {\r\n            return  article.thumbnail.source;\r\n        }\r\n        return require('./images/wiki.svg')\r\n    }\r\n\r\n    getPreview() {\r\n        if (! this.state.preview) {\r\n            return require('./images/wiki.svg')\r\n        }\r\n        const reader = new FileReader()\r\n\r\n        reader.onabort = () => console.log('file reading was aborted');\r\n        reader.onerror = () => console.log('file reading has failed');\r\n        reader.onload = () => {\r\n            // Do whatever you want with the file contents\r\n            const binaryStr = reader.result;\r\n            console.log(binaryStr);\r\n            return reader.result;\r\n        };\r\n        reader.readAsArrayBuffer(this.state.preview)\r\n    }\r\n\r\n    _refresh() {\r\n        this.setState(App.getInitState());\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// gsrlimit=10&prop=pageimages|extracts&pilimit=max&exintro&explaintext&exsentences=1&exlimit=max\r\n\r\nimport React, { Component } from 'react'\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport { Div } from '@vkontakte/vkui';\r\nimport \"leaflet/dist/leaflet.css\"\r\nimport request from \"superagent\";\r\n\r\n\r\nexport default class SimpleExample extends Component<{}> {\r\n\r\n\r\n\r\n    render() {\r\n        const apiUrl = 'https://en.wikipedia.org/w/api.php';\r\n\r\n        const params = {\r\n            format: 'json',\r\n            action: 'query',\r\n            generator: 'search',\r\n            gsrnamespace: '0',\r\n            gsrsearch: 'test',\r\n            gsrlimit: '2',\r\n            prop: 'pageimages|extracts',\r\n            pilimit: 'max',\r\n            exintro: true,\r\n            explaintext: true,\r\n            exsentences: 1,\r\n            exlimit: 'max',\r\n            titles: 'Karl Marx'\r\n        };\r\n\r\n        const req = request.get(apiUrl, params);\r\n        req.then(res => {\r\n            console.log(res);\r\n        });\r\n\r\n        return (\r\n            <Div>\r\n\r\n            </Div>\r\n        )\r\n    }\r\n}\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type').indexOf('javascript') === -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport connect from '@vkontakte/vkui-connect';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconnect.send('VKWebAppInit', {});\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/wiki.87c938e6.svg\";"],"sourceRoot":""}