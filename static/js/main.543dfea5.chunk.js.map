{"version":3,"sources":["components/SimpleExample.js","App.js","registerServiceWorker.js","index.js","images/wiki.svg"],"names":["SimpleExample","position","this","props","lat","lng","Map","center","zoom","className","TileLayer","attribution","url","Marker","Popup","Component","App","state","getInitState","_this","files","setState","showSpinner","pagesWithMatchingImages","webEntities","visuallySimilarImages","slideIndex","landmarks","displayResultsMode","preview","req","request","post","forEach","file","attach","then","res","body","pages_with_matching_images","web_entities","visually_similar_images","file_url","modal","activeModal","dynamicContentHeight","settlingHeight","id","onClose","header","style","minHeight","profilePhotos","length","display","alignItems","flexDirection","size","marginTop","map","img","alt","onClick","selectPhoto","sizes","src","key","width","onerror","activeView","activePanel","status","onDrop","onDropFiles","accept","getRootProps","getInputProps","mode","subheader","background","backgroundColor","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","actions","selectProfilePhoto","selectWallPhoto","icon","_refresh","landmark","i","marginVertical","JSON","stringify","title","locations","latitude","longitude","wiki","before","require","article","disabled","multiline","getWikiImage","caption","extract","Fragment","href","target","join","translateWebEntities","page","getPageImage","page_title","image","send","text","split","partial_matching_images","full_matching_images","thumbnail","source","modalHistory","indexOf","splice","push","bridge","subscribe","e","console","log","data","token","access_token","response","items","setActiveModal","catch","error","photos","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","connect","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.543dfea5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport \"leaflet/dist/leaflet.css\"\r\n\r\n\r\nexport default class SimpleExample extends Component<{}> {\r\n\r\n    render() {\r\n        const position = [this.props.lat, this.props.lng];\r\n        return (\r\n                <Map center={position} zoom={13} className=\"small-map\">\r\n                    <TileLayer\r\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    />\r\n                    <Marker position={position}>\r\n                        <Popup>\r\n                            A pretty CSS3 popup. <br /> Easily customizable.\r\n                        </Popup>\r\n                    </Marker>\r\n                </Map>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport {\r\n    Avatar,\r\n    Banner,\r\n    Button,\r\n    Card,\r\n    Div,\r\n    Group,\r\n    Header,\r\n    Link,\r\n    ModalPage,\r\n    ModalPageHeader,\r\n    ModalRoot,\r\n    Panel,\r\n    PanelHeader,\r\n    PanelHeaderContent, Placeholder,\r\n    platform,\r\n    RichCell,\r\n    Root, SimpleCell,\r\n    Spinner,\r\n    View\r\n} from '@vkontakte/vkui';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport Dropzone from \"react-dropzone\";\r\nimport request from \"superagent\";\r\nimport SimpleExample from \"./components/SimpleExample\";\r\nimport './css/style.css'\r\nimport Icon28HelpOutline from '@vkontakte/icons/dist/28/help_outline';\r\n\r\nconst MODAL_PROFILE_PHOTOS = 'modal_profile_photos';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = App.getInitState();\r\n    }\r\n\r\n    static getInitState() {\r\n        return {\r\n            activePanel: 'mainPanel',\r\n            pagesWithMatchingImages: [],\r\n            webEntities: [],\r\n            showSpinner: false,\r\n            visuallySimilarImages: [],\r\n            landmarks: [],\r\n            slideIndex: 0,\r\n            displayResultsMode: false,\r\n            preview: null,\r\n            photos: {},\r\n            profilePhotos: [],\r\n            activeModal: null,\r\n            modalHistory: [],\r\n            token: null,\r\n            status: null,\r\n        };\r\n    }\r\n\r\n    onDropFiles() {\r\n        let _this = this;\r\n        return function (files) {\r\n\r\n            _this.setState({\r\n                showSpinner: true, pagesWithMatchingImages: [], webEntities: [],\r\n                visuallySimilarImages: [], slideIndex: 0, landmarks: [], displayResultsMode: false, preview: null,\r\n            });\r\n            const req = request.post('https://ocr.kurumbus.com/api/web');\r\n            files.forEach(file => {\r\n                req.attach('file', file);\r\n            });\r\n            req.then(res => {\r\n\r\n                _this.setState({\r\n                    pagesWithMatchingImages: res.body.pages_with_matching_images ?? [],\r\n                    webEntities: res.body.web_entities ?? [],\r\n                    landmarks: res.body.landmarks ?? [],\r\n                    visuallySimilarImages: res.body.visually_similar_images ?? [],\r\n                    showSpinner: false, displayResultsMode: true, preview: res.body.file_url\r\n                });\r\n            });\r\n        };\r\n    }\r\n\r\n    render() {\r\n        // const osname = platform();\r\n        const modal = (\r\n            <ModalRoot\r\n                activeModal={this.state.activeModal}\r\n            >\r\n                <ModalPage\r\n                    dynamicContentHeight\r\n                    settlingHeight={80}\r\n                    id={MODAL_PROFILE_PHOTOS}\r\n                    onClose={() => this.setState({activeModal: null})}\r\n                    header={\r\n                        <ModalPageHeader>\r\n                            Выберите фото\r\n                        </ModalPageHeader>\r\n                    }\r\n                >\r\n\r\n                   <Div  style={{minHeight:1200}}>\r\n                       {\r\n                           this.state.profilePhotos.length  == 0 &&\r\n                               <Div>\r\n                                   <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                                       <Spinner size=\"large\" style={{ marginTop: 200 }} />\r\n                                   </div>\r\n                               </Div>\r\n                       }\r\n                       {\r\n                           this.state.profilePhotos.length >0 &&\r\n                           <Div>\r\n                               {\r\n                                   this.state.profilePhotos.map(img =>\r\n                                       <img alt=\"\"\r\n                                            onClick={() => {this.selectPhoto(img.sizes[2].url)}}\r\n                                            src={img.sizes[2].url}\r\n                                            key={img.sizes[2].url}\r\n                                            style={{width: '100%'}}\r\n                                            onerror=\"this.style.display='none'\"\r\n                                       />\r\n                                   )\r\n                               }\r\n                           </Div>\r\n                       }\r\n                   </Div>\r\n                </ModalPage>\r\n            </ModalRoot>\r\n        );\r\n\r\n\r\n        return (\r\n            <Root activeView=\"mainView\" modal={modal}>\r\n                <View id=\"mainView\" activePanel={this.state.activePanel}>\r\n                    <Panel id=\"mainPanel\">\r\n                        <PanelHeader>\r\n                            <PanelHeaderContent\r\n                                status=\"места и приедметы\"\r\n                            >\r\n                                Распознавание\r\n                            </PanelHeaderContent>\r\n                        </PanelHeader>\r\n                        {\r\n                            ! this.state.displayResultsMode &&\r\n                            <Group>\r\n                                <Dropzone onDrop={this.onDropFiles()} accept=\"image/jpeg,image/jpg,image/png\">\r\n                                    {({getRootProps, getInputProps}) => (\r\n                                        <section>\r\n                                            <Banner {...getRootProps()}\r\n                                                    mode=\"image\"\r\n                                                    size=\"m\"\r\n                                                    header=\"Выберите файл\"\r\n                                                    subheader={<span>для распознавания</span>}\r\n                                                    background={\r\n                                                        <div\r\n                                                            style={{\r\n                                                                backgroundColor: '#5b9be6',\r\n                                                                backgroundImage: 'url(https://sun9-31.userapi.com/PQ4UCzqE_jue9hAINefBMorYCdfGXvcuV5nSjA/eYugcFYzdW8.jpg)',\r\n                                                                backgroundPosition: 'right bottom',\r\n                                                                backgroundSize: '102%',\r\n                                                                backgroundRepeat: 'no-repeat',\r\n                                                            }}\r\n                                                        >\r\n                                                            <input {...getInputProps()} />\r\n                                                        </div>\r\n                                                    }\r\n                                                    actions={<Button mode=\"secondary_overlay\" size=\"l\">Выбрать</Button>}\r\n                                            />\r\n                                        </section>\r\n                                    )}\r\n                                </Dropzone>\r\n                                <Div>\r\n                                    <Button onClick={() => this.selectProfilePhoto()} mode={\"secondary\"} size=\"xl\">\r\n                                        Выбрать Фото Профиля\r\n                                    </Button>\r\n                                </Div>\r\n                                <Div>\r\n                                    <Button onClick={() => this.selectWallPhoto()} mode={\"secondary\"} size=\"xl\">\r\n                                        Выбрать Фото Со Стены\r\n                                    </Button>\r\n                                </Div>\r\n                                {/*<Div>\r\n                                   {JSON.stringify(this.state.status)}\r\n                                </Div>*/}\r\n                                <Placeholder\r\n                                    icon={<Icon28HelpOutline />}\r\n                                >\r\n                                    Приложение распознаёт места и предметы с помощью искусственного интеллекта.<br/>\r\n                                    Находит местоположение, ключевые слова, полезную информацию и ссылки.\r\n\r\n                                </Placeholder>\r\n                            </Group>\r\n                        }\r\n                        {\r\n                            this.state.displayResultsMode &&\r\n                            <Group>\r\n                                <Banner mode=\"image\"\r\n                                        size=\"m\"\r\n                                        header={<Div></Div>}\r\n                                        subheader=\"\"\r\n                                        background={\r\n                                            <div\r\n                                                style={{\r\n                                                    backgroundColor: '#5b9be6',\r\n                                                    backgroundImage: 'url('+this.state.preview+')',\r\n                                                    backgroundPosition: 'center center',\r\n                                                    backgroundSize: 'cover',\r\n                                                    backgroundRepeat: 'no-repeat',\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                        actions={<Button mode=\"secondary_overlay\" size=\"l\" onClick={() => this._refresh()}>Сбросить</Button>}\r\n                                />\r\n                            </Group>\r\n                        }\r\n                        {\r\n                            this.state.showSpinner && (\r\n                                <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                                    <Spinner size=\"large\" style={{ marginTop: 20 }} />\r\n                                </div>\r\n                            )\r\n                        }\r\n                        {\r\n                            this.state.landmarks.length > 0 &&\r\n                            <Group header={<Header mode=\"secondary\">Места на фотографии:</Header>} style={{marginTop: 20}}>\r\n                                {\r\n                                    this.state.landmarks.map((landmark, i) => {\r\n                                        return (\r\n                                            <Div style={{marginVertical: 20}} key={JSON.stringify(landmark)}>\r\n                                                <Card mode=\"shadow\">\r\n                                                    <Div>{landmark.title}</Div>\r\n                                                    { landmark.locations.length > 0 &&\r\n                                                    <SimpleExample lat={landmark.locations[0].latitude}\r\n                                                                   lng={landmark.locations[0].longitude}\r\n                                                    />\r\n                                                    }\r\n                                                    { landmark.wiki &&\r\n                                                    <Group header={/*<Header mode=\"secondary\"><Avatar size={16} /></Header>*/\r\n                                                        <SimpleCell\r\n                                                            before={<Avatar size={28} src={require('./images/wiki.svg')} />}\r\n                                                        >\r\n                                                            Результаты из Википедии\r\n                                                        </SimpleCell>}>\r\n                                                        {\r\n                                                            landmark.wiki.map(article => {\r\n                                                                return (\r\n                                                                    <Card mode=\"outline\" key={JSON.stringify(article)}>\r\n                                                                        <RichCell\r\n                                                                            disabled\r\n                                                                            multiline\r\n                                                                            before={<Avatar size={72} mode=\"image\" src={this.getWikiImage(article)} />}\r\n                                                                            caption={article.extract}\r\n                                                                            actions={\r\n                                                                                <React.Fragment>\r\n                                                                                    <Link href={\"https://en.wikipedia.org/wiki/\"+article.title} target=\"_blank\">\r\n                                                                                        <Button mode=\"secondary\">Открыть</Button>\r\n                                                                                    </Link>\r\n                                                                                </React.Fragment>\r\n                                                                            }\r\n                                                                        >\r\n                                                                            {article.title}\r\n                                                                        </RichCell>\r\n                                                                    </Card>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </Group>\r\n                                                    }\r\n                                                </Card>\r\n                                            </Div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </Group>\r\n                        }\r\n                        {\r\n                            this.state.webEntities.length > 0 &&\r\n                            <Group  header={<Header mode=\"secondary\">Ключевые слова:</Header>}>\r\n                                <Div style={{marginVertical: 20}}>\r\n                                    <Card mode=\"shadow\">\r\n                                        <Div>\r\n                                            {\r\n                                                this.state.webEntities.join(', ')\r\n                                            }\r\n                                        </Div>\r\n                                        <Div>\r\n                                            <Button mode=\"secondary\" onClick={() => {this.translateWebEntities()}}>Перевести</Button>\r\n                                        </Div>\r\n                                    </Card>\r\n                                </Div>\r\n                            </Group>\r\n                        }\r\n                        {\r\n                            this.state.pagesWithMatchingImages.length > 0 &&\r\n                            <Group header={<Header mode=\"secondary\">Связанные ссылки:</Header>}>\r\n                                {\r\n                                    this.state.pagesWithMatchingImages.map(page =>\r\n                                        <RichCell\r\n                                            key={JSON.stringify(page)}\r\n                                            disabled\r\n                                            multiline\r\n                                            before={<Avatar size={72} mode=\"image\" src={this.getPageImage(page)}/>}\r\n                                            actions={\r\n                                                <React.Fragment>\r\n                                                    <Link href={page.url} target=\"_blank\">\r\n                                                        <Button mode=\"secondary\">\r\n                                                            Открыть\r\n                                                        </Button>\r\n                                                    </Link>\r\n                                                </React.Fragment>\r\n                                            }\r\n                                        >\r\n                                            {page.page_title}\r\n                                        </RichCell>\r\n                                    )\r\n                                }\r\n                            </Group>\r\n                        }\r\n\r\n                        {\r\n                            this.state.visuallySimilarImages.length > 0 &&\r\n                            <Group header={<Header mode=\"secondary\">Похожие картинки:</Header>}>\r\n                                <Div>\r\n                                    {\r\n                                        this.state.visuallySimilarImages.map(image =>\r\n                                            <img alt=\"\"\r\n                                                 src={image}\r\n                                                 key={image}\r\n                                                 style={{width: '100%'}}\r\n                                                 onerror=\"this.style.display='none'\"\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                </Div>\r\n                            </Group>\r\n                        }\r\n\r\n                    </Panel>\r\n                </View>\r\n            </Root>\r\n        );\r\n    }\r\n\r\n    translateWebEntities() {\r\n        const _this = this;\r\n        let req = request.post('https://ocr.kurumbus.com/api/translate')\r\n            .send({ \"text\":  this.state.webEntities.join(', ')});\r\n        req.then(res => {\r\n            _this.setState({\r\n                webEntities: res.body.text.split(',') ?? [],\r\n            });\r\n        });\r\n    }\r\n\r\n    getPageImage(page) {\r\n        if (page.partial_matching_images && page.partial_matching_images.length > 0) {\r\n            return  page.partial_matching_images[0].url;\r\n        }\r\n\r\n        if (page.full_matching_images && page.full_matching_images.length > 0) {\r\n            return  page.full_matching_images[0].url;\r\n        }\r\n        return require('./images/wiki.svg')\r\n    }\r\n\r\n    getWikiImage(article) {\r\n        if (article && article.thumbnail) {\r\n            return  article.thumbnail.source;\r\n        }\r\n        return require('./images/wiki.svg')\r\n    }\r\n\r\n    _refresh() {\r\n        this.setState(App.getInitState());\r\n    }\r\n\r\n    setActiveModal(activeModal) {\r\n        activeModal = activeModal || null;\r\n        let modalHistory = this.state.modalHistory ? [...this.state.modalHistory] : [];\r\n\r\n        if (activeModal === null) {\r\n            modalHistory = [];\r\n        } else if (modalHistory.indexOf(activeModal) !== -1) {\r\n            modalHistory = modalHistory.splice(0, modalHistory.indexOf(activeModal) + 1);\r\n        } else {\r\n            modalHistory.push(activeModal);\r\n        }\r\n\r\n        this.setState({\r\n            activeModal,\r\n            modalHistory\r\n        });\r\n    }\r\n\r\n\r\n    selectProfilePhoto() {\r\n        this.setState({showSpinner: true});\r\n        bridge.subscribe((e) => console.log(e));\r\n        bridge.send(\"VKWebAppInit\", {});\r\n        bridge.send(\"VKWebAppGetAuthToken\", {\"app_id\": 7481050, \"scope\": \"photos\"}).then(data => {\r\n            this.setState({token: data});\r\n            const access_token =  data.access_token;\r\n            bridge.send(\"VKWebAppCallAPIMethod\",\r\n                {\"method\": \"photos.get\", \"request_id\": \"32test\", \"params\": {\"rev\": 1, \"v\":\"5.107\", \"album_id\":\"profile\", \"access_token\": access_token}}\r\n                ).then(res => {\r\n                    this.setState({profilePhotos: res.response.items, showSpinner: false}, () => {\r\n                        this.setActiveModal(MODAL_PROFILE_PHOTOS);\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    selectWallPhoto() {\r\n        this.setState({showSpinner: true});\r\n        bridge.subscribe((e) => console.log(e));\r\n        bridge.send(\"VKWebAppInit\", {});\r\n        bridge.send(\"VKWebAppGetAuthToken\", {\"app_id\": 7481050, \"scope\": \"photos\"}).then(data => {\r\n            this.setState({token: data, status: \"request\"});\r\n            const access_token =  data.access_token;\r\n            bridge.send(\"VKWebAppCallAPIMethod\",\r\n                {\"method\": \"photos.get\", \"request_id\": \"32test\", \"params\": {\"rev\": 1, \"v\":\"5.107\", \"album_id\":\"wall\", \"access_token\": access_token}}\r\n            ).then(res => {\r\n                this.setState({status: res, profilePhotos: res.response.items, showSpinner: false}, () => {\r\n                    this.setActiveModal(MODAL_PROFILE_PHOTOS);\r\n                });\r\n            }).catch(error => {\r\n                this.setState({status: error})\r\n            });\r\n        });\r\n    }\r\n\r\n    selectPhoto(url) {\r\n        this.setState({status: url});\r\n        this.setActiveModal(null);\r\n        this.setState({\r\n            showSpinner: true, pagesWithMatchingImages: [], webEntities: [],\r\n            visuallySimilarImages: [], slideIndex: 0, landmarks: [], displayResultsMode: false, preview: null,\r\n        });\r\n        const _this = this;\r\n        let req = request.post('https://ocr.kurumbus.com/api/web-url')\r\n                         .send({ \"file_url\":  url});\r\n        req.then(res => {\r\n            _this.setState({\r\n                pagesWithMatchingImages: res.body.pages_with_matching_images ?? [],\r\n                webEntities: res.body.web_entities ?? [],\r\n                landmarks: res.body.landmarks ?? [],\r\n                visuallySimilarImages: res.body.visually_similar_images ?? [],\r\n                showSpinner: false, displayResultsMode: true, preview: res.body.file_url\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type').indexOf('javascript') === -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport connect from '@vkontakte/vkui-connect';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconnect.send('VKWebAppInit', {});\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","module.exports = __webpack_public_path__ + \"static/media/wiki.87c938e6.svg\";"],"sourceRoot":""}