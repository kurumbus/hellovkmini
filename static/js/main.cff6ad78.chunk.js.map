{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","state","getInitState","_this","this","files","setState","showSpinner","pagesWithMatchingImages","webEntities","visuallySimilarImages","slideIndex","req","request","post","forEach","file","attach","then","res","console","log","body","pages_with_matching_images","web_entities","visually_similar_images","platform","activeView","id","activePanel","title","onDrop","onDropFiles","getRootProps","getInputProps","mode","size","header","subheader","background","style","backgroundColor","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","asideMode","actions","display","alignItems","flexDirection","marginTop","length","join","map","page","disabled","multiline","before","src","getPageImage","Fragment","href","url","target","page_title","slideWidth","align","height","onChange","image","partial_matching_images","full_matching_images","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","connect","send","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cff6ad78.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n    Avatar,\r\n    Banner,\r\n    Button,\r\n    Div,\r\n    Gallery,\r\n    Group,\r\n    Header,\r\n    Link,\r\n    List,\r\n    Panel,\r\n    PanelHeader,\r\n    platform,\r\n    RichCell,\r\n    Root,\r\n    Spinner,\r\n    View\r\n} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport Dropzone from \"react-dropzone\";\r\nimport request from \"superagent\";\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = App.getInitState();\r\n    }\r\n\r\n    static getInitState() {\r\n        return {\r\n            activePanel: 'mainPanel',\r\n            pagesWithMatchingImages: [],\r\n            webEntities: [],\r\n            showSpinner: false,\r\n            visuallySimilarImages: [],\r\n            slideIndex: 0,\r\n        };\r\n    }\r\n\r\n    onDropFiles() {\r\n        let _this = this;\r\n        return function (files) {\r\n            _this.setState({\r\n                showSpinner: true, pagesWithMatchingImages: [], webEntities: [],\r\n                visuallySimilarImages: [], slideIndex: 0,\r\n            });\r\n            const req = request.post('https://ocr.kurumbus.com/api/web');\r\n            files.forEach(file => {\r\n                req.attach('file', file);\r\n            });\r\n            req.then(res => {\r\n                console.log(res);\r\n\r\n                _this.setState({\r\n                    pagesWithMatchingImages: res.body.pages_with_matching_images ?? [],\r\n                    webEntities: res.body.web_entities ?? [],\r\n                    visuallySimilarImages: res.body.visually_similar_images ?? [],\r\n                    showSpinner: false,\r\n                });\r\n            });\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const osname = platform();\r\n        return (\r\n            <Root activeView=\"mainView\">\r\n                <View id=\"mainView\" activePanel={this.state.activePanel}>\r\n                    <Panel id=\"mainPanel\">\r\n                        <PanelHeader>\r\n                            Лапа - котина любимица\r\n                        </PanelHeader>\r\n                        <Group title=\"Звуки\">\r\n                            <List>\r\n                                <Div>\r\n                                    <Dropzone onDrop={this.onDropFiles()}>\r\n                                        {({getRootProps, getInputProps}) => (\r\n                                            <section>\r\n                                                <Banner {...getRootProps()}\r\n                                                        mode=\"image\"\r\n                                                        size=\"m\"\r\n                                                        header=\"Выберите файл\"\r\n                                                        subheader={<span>Выберите файл для распознавания</span>}\r\n                                                        background={\r\n                                                            <div\r\n                                                                style={{\r\n                                                                    backgroundColor: '#5b9be6',\r\n                                                                    backgroundImage: 'url(https://sun9-31.userapi.com/PQ4UCzqE_jue9hAINefBMorYCdfGXvcuV5nSjA/eYugcFYzdW8.jpg)',\r\n                                                                    backgroundPosition: 'right bottom',\r\n                                                                    backgroundSize: '102%',\r\n                                                                    backgroundRepeat: 'no-repeat',\r\n                                                                }}\r\n                                                            >\r\n                                                                <input {...getInputProps()} />\r\n                                                            </div>\r\n                                                        }\r\n                                                        asideMode=\"dismiss\"\r\n                                                        actions={<Button mode=\"overlay\" size=\"l\">Подробнее</Button>}\r\n                                                />\r\n                                            </section>\r\n                                        )}\r\n                                    </Dropzone>\r\n                                </Div>\r\n                            </List>\r\n                        </Group>\r\n                        {\r\n                            this.state.showSpinner && (\r\n                                <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n                                    <Spinner size=\"large\" style={{ marginTop: 20 }} />\r\n                                </div>\r\n                            )\r\n                        }\r\n                        {\r\n                            this.state.webEntities.length > 0 &&\r\n                            <Group  header={<Header mode=\"secondary\">Результат распознавания:</Header>}>\r\n\r\n                                <Div>\r\n                                    {\r\n                                        this.state.webEntities.join(', ')\r\n                                    }\r\n                                </Div>\r\n                            </Group>\r\n                        }\r\n                        {\r\n                            this.state.pagesWithMatchingImages.length > 0 &&\r\n                            <Group header={<Header mode=\"secondary\">Связанные ссылки:</Header>}>\r\n                                {\r\n                                    this.state.pagesWithMatchingImages.map(page =>\r\n                                        <RichCell\r\n                                            disabled\r\n                                            multiline\r\n                                            before={<Avatar size={72} mode=\"image\" src={this.getPageImage(page)}/>}\r\n                                            actions={\r\n                                                <React.Fragment>\r\n                                                    <Link href={page.url} target=\"_blank\">\r\n                                                        <Button>\r\n                                                            Открыть\r\n                                                        </Button>\r\n                                                    </Link>\r\n                                                </React.Fragment>\r\n                                            }\r\n                                        >\r\n                                            {page.page_title}\r\n                                        </RichCell>\r\n                                    )\r\n                                }\r\n                            </Group>\r\n                        }\r\n\r\n                        {\r\n                            this.state.visuallySimilarImages.length > 0 &&\r\n                            <Group header={<Header mode=\"secondary\">Похожие картинки:</Header>}>\r\n\r\n                                <Gallery\r\n                                    slideWidth=\"90%\"\r\n                                    align=\"center\"\r\n                                    style={{ height: 300 }}\r\n                                    slideIndex={this.state.slideIndex}\r\n                                    onChange={slideIndex => this.setState({slideIndex})}\r\n                                >\r\n                                    {\r\n                                        this.state.visuallySimilarImages.map(image =>\r\n                                            <div style={{\r\n                                                backgroundColor: '#5b9be6',\r\n                                                backgroundImage: 'url('+image+')',\r\n                                                backgroundPosition: 'right bottom',\r\n                                                backgroundSize: '102%',\r\n                                                backgroundRepeat: 'no-repeat',\r\n                                            }} />\r\n                                        )\r\n                                    }\r\n                                </Gallery>\r\n                            </Group>\r\n                        }\r\n\r\n                    </Panel>\r\n                </View>\r\n            </Root>\r\n        );\r\n    }\r\n\r\n    getPageImage(page) {\r\n        if (page.partial_matching_images && page.partial_matching_images.length > 0) {\r\n            return  page.partial_matching_images[0].url;\r\n        }\r\n\r\n        if (page.full_matching_images && page.full_matching_images.length > 0) {\r\n            return  page.full_matching_images[0].url;\r\n        }\r\n        return 'https://sun6-16.userapi.com/TsyTWRNoAgLrdrGDa8Y-ixTzN2z7_4r5tuSO6Q/nC9XgsF2loA.jpg'\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type').indexOf('javascript') === -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport connect from '@vkontakte/vkui-connect';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconnect.send('VKWebAppInit', {});\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}